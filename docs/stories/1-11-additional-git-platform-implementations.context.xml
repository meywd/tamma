<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>11</storyId>
    <title>Additional Git Platform Implementations</title>
    <status>drafted</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>F:\Code\Repos\Tamma\docs\stories\1-11-additional-git-platform-implementations.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a Tamma operator</asA>
    <iWant>support for multiple Git platforms (Gitea, Forgejo, Bitbucket, Azure DevOps, and plain Git)</iWant>
    <soThat>I can use Tamma with my preferred Git hosting service regardless of vendor</soThat>
    <tasks>### Task 1: Gitea Provider Implementation (AC: 1, 6, 8)

- [ ] Subtask 1.1: Research Gitea API capabilities and authentication
- [ ] Subtask 1.2: Create GiteaPlatform class implementing IGitPlatform
- [ ] Subtask 1.3: Integrate Gitea API client (REST API v1)
- [ ] Subtask 1.4: Implement repository operations (getRepository, listIssues, getIssue)
- [ ] Subtask 1.5: Implement branch operations (createBranch, getBranch)
- [ ] Subtask 1.6: Implement pull request operations (create, get, update, merge)
- [ ] Subtask 1.7: Add authentication (API token, OAuth2)
- [ ] Subtask 1.8: Add error handling (rate limits, API-specific errors)
- [ ] Subtask 1.9: Implement pagination and retry logic
- [ ] Subtask 1.10: Write unit and integration tests

### Task 2: Forgejo Provider Implementation (AC: 2, 6, 8)

- [ ] Subtask 2.1: Research Forgejo API capabilities (Gitea-compatible API)
- [ ] Subtask 2.2: Create ForgejoPlatform class implementing IGitPlatform
- [ ] Subtask 2.3: Integrate Forgejo API client (reuse Gitea client if API-compatible)
- [ ] Subtask 2.4: Implement repository operations (getRepository, listIssues, getIssue)
- [ ] Subtask 2.5: Implement branch operations (createBranch, getBranch)
- [ ] Subtask 2.6: Implement pull request operations (create, get, update, merge)
- [ ] Subtask 2.7: Add authentication (API token, OAuth2)
- [ ] Subtask 2.8: Add error handling (rate limits, API-specific errors)
- [ ] Subtask 2.9: Implement pagination and retry logic
- [ ] Subtask 2.10: Write unit and integration tests

### Task 3: Bitbucket Provider Implementation (AC: 3, 6, 8)

- [ ] Subtask 3.1: Research Bitbucket Cloud API v2 and Bitbucket Server API
- [ ] Subtask 3.2: Create BitbucketPlatform class implementing IGitPlatform
- [ ] Subtask 3.3: Integrate Bitbucket API clients (Cloud REST API v2, Server REST API)
- [ ] Subtask 3.4: Implement repository operations (getRepository, listIssues, getIssue)
- [ ] Subtask 3.5: Implement branch operations (createBranch, getBranch)
- [ ] Subtask 3.6: Implement pull request operations (create, get, update, merge)
- [ ] Subtask 3.7: Add authentication (App passwords, OAuth2, PAT for Server)
- [ ] Subtask 3.8: Add error handling (rate limits, API version differences)
- [ ] Subtask 3.9: Implement pagination (Cloud uses cursors, Server uses pages)
- [ ] Subtask 3.10: Implement retry logic with exponential backoff
- [ ] Subtask 3.11: Write unit and integration tests for Cloud and Server

### Task 4: Azure DevOps Provider Implementation (AC: 4, 6, 8)

- [ ] Subtask 4.1: Research Azure DevOps Services and Server API (REST API 7.1+)
- [ ] Subtask 4.2: Create AzureDevOpsPlatform class implementing IGitPlatform
- [ ] Subtask 4.3: Integrate Azure DevOps SDK or REST API client
- [ ] Subtask 4.4: Implement repository operations (getRepository, listWorkItems, getWorkItem)
- [ ] Subtask 4.5: Implement branch operations (createBranch, getBranch)
- [ ] Subtask 4.6: Implement pull request operations (create, get, update, complete)
- [ ] Subtask 4.7: Add authentication (PAT, OAuth2, Azure AD integration)
- [ ] Subtask 4.8: Add error handling (rate limits, API-specific errors, work item types)
- [ ] Subtask 4.9: Implement pagination and continuation tokens
- [ ] Subtask 4.10: Implement retry logic with exponential backoff
- [ ] Subtask 4.11: Write unit and integration tests for Services and Server

### Task 5: Plain Git Provider Implementation (AC: 5, 6, 8)

- [ ] Subtask 5.1: Research plain Git operations without platform features
- [ ] Subtask 5.2: Create PlainGitPlatform class implementing IGitPlatform
- [ ] Subtask 5.3: Integrate local Git client (simple-git or isomorphic-git)
- [ ] Subtask 5.4: Implement repository operations (local repository access)
- [ ] Subtask 5.5: Implement branch operations (createBranch, getBranch using Git commands)
- [ ] Subtask 5.6: Implement commit and push operations (no PR support)
- [ ] Subtask 5.7: Add error handling (Git command errors, merge conflicts)
- [ ] Subtask 5.8: Document limitations (no issues, no PRs, no CI/CD integration)
- [ ] Subtask 5.9: Write unit and integration tests with local Git repos

### Task 6: Platform Selection and Configuration (AC: 7)

- [ ] Subtask 6.1: Extend platform configuration schema for all new platforms
- [ ] Subtask 6.2: Add platform selection logic (read from config, environment)
- [ ] Subtask 6.3: Add platform factory pattern for dynamic provider instantiation
- [ ] Subtask 6.4: Add validation for platform-specific configuration
- [ ] Subtask 6.5: Add platform capability discovery (which platforms support which features)
- [ ] Subtask 6.6: Write tests for platform selection and configuration loading

### Task 7: Documentation and Platform Comparison (AC: 9)

- [ ] Subtask 7.1: Document Gitea setup (API token generation, permissions)
- [ ] Subtask 7.2: Document Forgejo setup (API token generation, permissions)
- [ ] Subtask 7.3: Document Bitbucket Cloud setup (App passwords, OAuth2)
- [ ] Subtask 7.4: Document Bitbucket Server setup (PAT, permissions)
- [ ] Subtask 7.5: Document Azure DevOps Services setup (PAT, OAuth2, Azure AD)
- [ ] Subtask 7.6: Document Azure DevOps Server setup (PAT, permissions)
- [ ] Subtask 7.7: Document Plain Git setup (local repository requirements, limitations)
- [ ] Subtask 7.8: Create platform comparison matrix (features, API maturity, rate limits)
- [ ] Subtask 7.9: Document platform selection strategy (when to use which platform)
- [ ] Subtask 7.10: Create troubleshooting guide for platform-specific issues
- [ ] Subtask 7.11: Update architecture documentation with platform extensibility patterns
- [ ] Subtask 7.12: Review documentation with stakeholders</tasks>
  </story>

  <acceptanceCriteria>1. Gitea provider implements IGitPlatform interface with Gitea API integration
2. Forgejo provider implements IGitPlatform interface with Forgejo API integration
3. Bitbucket provider implements IGitPlatform interface with Bitbucket Cloud and Server API support
4. Azure DevOps provider implements IGitPlatform interface with Azure DevOps Services and Server API support
5. Plain Git provider implements IGitPlatform interface with local Git operations (no platform features)
6. Each provider includes comprehensive error handling, retry logic, and pagination support
7. Provider selection configurable via config file or environment variables
8. Integration tests validate each provider with real API calls (or local Git for plain Git provider)
9. Documentation includes platform comparison matrix and setup instructions for each platform</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Additional Git Platform Implementations" snippet="Gitea Provider: GiteaPlatform implements IGitPlatform - REST API v1 (similar to GitHub API v3), self-hosted, Gitea Actions CI/CD, Forgejo Provider: ForgejoPlatform implements IGitPlatform - Gitea-compatible API (forked from Gitea), may reuse GiteaPlatform client" />
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Additional Git Platform Implementations" snippet="Bitbucket Provider: BitbucketPlatform implements IGitPlatform - Cloud (REST API v2) and Server (REST API 1.0-8.0), handles API differences between versions, Azure DevOps Provider: AzureDevOpsPlatform implements IGitPlatform - REST API 7.1+ via azure-devops-node-api@^13.0.0, Work Items (not issues), PR completion (not merge)" />
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Additional Git Platform Implementations" snippet="Plain Git Provider: PlainGitProvider implements IGitPlatform - local Git operations via simple-git@^3.27.0, NO platform features (no issues, PRs, CI/CD), All providers follow same patterns: error handling, retry logic, pagination support" />
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Git Platform SDKs" snippet="@octokit/rest: GitHub REST API client, @gitbeaker/node: GitLab API client, azure-devops-node-api: Azure DevOps API client, simple-git: Local Git operations" />
      <doc path="docs/architecture.md" title="Technical Architecture" section="Project Structure" snippet="packages/platforms/ - Git platform abstraction with base-platform.ts, github.ts, gitlab.ts, gitea.ts, forgejo.ts" />
    </docs>
    <code>{{code_artifacts}}</code>
    <dependencies>
      <ecosystem name="node">
        <package name="axios" version="^1.7.9" purpose="HTTP client for Gitea, Forgejo, Bitbucket REST APIs" />
        <package name="azure-devops-node-api" version="^13.0.0" purpose="Azure DevOps SDK for Services and Server APIs" />
        <package name="simple-git" version="^3.27.0" purpose="Local Git operations for Plain Git provider" />
      </ecosystem>
      <ecosystem name="workspace">
        <package name="@tamma/config" purpose="Platform configuration management" />
        <package name="@tamma/types" purpose="IGitPlatform interface definitions" />
        <package name="@tamma/logger" purpose="Platform operation logging" />
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="interface" description="All platforms must implement IGitPlatform interface exactly" source="docs/tech-spec-epic-1.md#Git-Platform-Abstraction" />
    <constraint type="pagination" description="All platforms must handle pagination (cursor-based for Cloud, page-based for Server)" source="docs/tech-spec-epic-1.md#Additional-Git-Platform-Implementations" />
    <constraint type="error-handling" description="All platforms must include retry logic with exponential backoff for transient failures" source="docs/tech-spec-epic-1.md#Additional-Git-Platform-Implementations" />
    <constraint type="api-differences" description="Bitbucket Cloud and Server APIs are VERY different - need separate implementations or abstraction" source="docs/stories/1-11-additional-git-platform-implementations.md#API-Quirks-and-Gotchas" />
    <constraint type="normalization" description="All platforms must normalize API responses to standard PullRequest, Issue, Branch models" source="docs/tech-spec-epic-1.md#Git-Platform-Abstraction" />
    <constraint type="testing" description="All platforms must have unit tests and integration tests with real API calls" source="docs/tech-spec-epic-1.md#Additional-Git-Platform-Implementations" />
  </constraints>
  <interfaces>
    <interface name="IGitPlatform" kind="interface" signature="interface IGitPlatform { initialize(config: PlatformConfig): Promise<void>; getRepository(owner: string, repo: string): Promise<Repository>; listIssues(repo: Repository, filters: IssueFilters): Promise<Issue[]>; getIssue(repo: Repository, issueNumber: number): Promise<Issue>; createBranch(repo: Repository, branchName: string, fromRef: string): Promise<Branch>; getBranch(repo: Repository, branchName: string): Promise<Branch>; createPullRequest(repo: Repository, params: PRCreateParams): Promise<PullRequest>; getPullRequest(repo: Repository, prNumber: number): Promise<PullRequest>; updatePullRequest(pr: PullRequest, updates: PRUpdate): Promise<PullRequest>; mergePullRequest(pr: PullRequest, method: MergeMethod): Promise<MergeResult>; getPRStatus(pr: PullRequest): Promise<PRStatus>; getChecks(pr: PullRequest): Promise<Check[]>; }" path="docs/tech-spec-epic-1.md#Core-Interfaces" />
    <interface name="PlatformConfig" kind="interface" signature="interface PlatformConfig { platformId: string; platformType: string; baseUrl?: string; authType: 'oauth' | 'pat' | 'app' | 'ssh'; credentials: { accessToken?: string; refreshToken?: string; expiresAt?: Date; }; }" path="docs/tech-spec-epic-1.md#Data-Models-and-Contracts" />
    <interface name="Repository" kind="interface" signature="interface Repository { owner: string; name: string; defaultBranch: string; cloneUrl: string; platform: 'github' | 'gitlab' | 'gitea' | 'forgejo' | 'bitbucket' | 'azure-devops' | 'plain-git'; }" path="docs/tech-spec-epic-1.md#Data-Models-and-Contracts" />
    <interface name="PullRequest" kind="interface" signature="interface PullRequest { number: number; title: string; body: string; state: 'open' | 'closed' | 'merged'; sourceBranch: string; targetBranch: string; author: string; createdAt: Date; updatedAt: Date; mergedAt?: Date; url: string; }" path="docs/tech-spec-epic-1.md#Data-Models-and-Contracts" />
  </interfaces>
  <tests>
    <standards>Unit tests with Jest 29+ and TypeScript support, Integration tests with real API calls, Platform-specific tests for Cloud vs Server differences, Local Git tests with real repositories, Coverage targets: 80% line, 75% branch, 85% function</standards>
    <locations>
      <location pattern="packages/platforms/src/**/*.test.ts" purpose="Unit tests for all platform implementations" />
      <location pattern="packages/platforms/test/**/*.test.ts" purpose="Integration tests for platform APIs" />
      <location pattern="packages/platforms/test/integration/" purpose="End-to-end platform tests" />
    </locations>
    <ideas>
      <test idea="Gitea provider integration" acceptanceCriteria="1,6,8" description="Test Gitea API v1 integration, repository operations, branch operations, PR operations, authentication via API token, error handling for rate limits" />
      <test idea="Bitbucket Cloud vs Server differences" acceptanceCriteria="3,6,8" description="Test API differences between Cloud (cursors) and Server (pages), authentication differences (App passwords vs PAT), pagination handling" />
      <test idea="Azure DevOps Work Items vs Issues" acceptanceCriteria="4,6,8" description="Test Work Item types (User Story, Bug, Task), area paths and iterations, PR completion vs merge terminology" />
      <test idea="Plain Git local operations" acceptanceCriteria="5,6,8" description="Test local Git operations via simple-git, branch creation and management, commit and push operations, error handling for merge conflicts" />
      <test idea="Platform selection and configuration" acceptanceCriteria="7" description="Test platform factory pattern, configuration loading from config file, environment variable overrides, platform capability discovery" />
    </ideas>
  </tests>
</story-context>