<story-context id="bmad/bmm/workflows/4-implementation/story-context" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>3</storyId>
    <title>Provider Configuration Management</title>
    <status>drafted</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-3-provider-configuration-management.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>DevOps engineer</asA>
    <iWant>centralized configuration for AI provider settings</iWant>
    <soThat>I can easily switch providers or configure provider-specific parameters</soThat>
    <tasks>
- [ ] Task 1: Design configuration schema and data structures (AC: 1, 2)
  - [ ] Subtask 1.1: Create ProviderConfig interface with all required fields
  - [ ] Subtask 1.2: Define ProviderRegistry class for managing multiple providers
  - [ ] Subtask 1.3: Create configuration validation schemas using JSON Schema
- [ ] Task 2: Implement configuration loading and parsing (AC: 1, 3)
  - [ ] Subtask 2.1: Create ProviderConfigManager class for loading configs
  - [ ] Subtask 2.2: Support multiple configuration sources (JSON files, environment variables)
  - [ ] Subtask 2.3: Implement configuration validation on load
- [ ] Task 3: Add environment variable override support (AC: 4)
  - [ ] Subtask 3.1: Implement environment variable parsing for sensitive values
  - [ ] Subtask 3.2: Add secure credential handling with OS keychain integration
  - [ ] Subtask 3.3: Create credential validation and testing
- [ ] Task 4: Implement configuration hot-reload functionality (AC: 5)
  - [ ] Subtask 4.1: Add file watching for configuration changes
  - [ ] Subtask 4.2: Implement hot-reload for non-critical settings
  - [ ] Subtask 4.3: Add configuration change event emission
- [ ] Task 5: Create provider discovery and selection logic (AC: 2)
  - [ ] Subtask 5.1: Implement provider registry pattern for dynamic discovery
  - [ ] Subtask 5.2: Add provider priority and capability-based selection
  - [ ] Subtask 5.3: Create provider switching mechanisms
- [ ] Task 6: Create comprehensive documentation and examples (AC: 6)
  - [ ] Subtask 6.1: Write configuration file format documentation
  - [ ] Subtask 6.2: Create example configurations for all planned providers
  - [ ] Subtask 6.3: Document environment variable usage and security practices
- [ ] Task 7: Add comprehensive testing (AC: 3, 5)
  - [ ] Subtask 7.1: Write unit tests for configuration loading and validation
  - [ ] Subtask 7.2: Write tests for environment variable overrides
  - [ ] Subtask 7.3: Write integration tests for hot-reload functionality
    </tasks>
  </story>

  <acceptanceCriteria>
1. Configuration file supports multiple provider entries (Claude Code, OpenCode, GLM, local LLM)
2. Each provider entry includes: name, API endpoint, API key reference, capabilities, priority
3. Configuration validates on load (required fields, valid URLs, accessible credentials)
4. System supports environment variable overrides for sensitive values (API keys)
5. Configuration reload without restart for non-critical settings changes
6. Documentation includes example configurations for all planned providers
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Provider Configuration Service" snippet="ProviderConfigManager class for loading/validating provider configs. Configuration sources: environment variables (TAMMA_AI_PROVIDER), JSON files (~/.tamma/providers.json), runtime API. Provider registry pattern for dynamic provider discovery. Validation against JSON Schema. Hot-reload capability for config changes. Secrets management integration for API keys.">
      </doc>
      <doc path="docs/epics.md" title="Tamma - Epic Breakdown" section="Story 1.3: Provider Configuration Management" snippet="Configuration file supports multiple provider entries (Claude Code, OpenCode, GLM, local LLM). Each provider entry includes: name, API endpoint, API key reference, capabilities, priority. Configuration validates on load (required fields, valid URLs, accessible credentials). System supports environment variable overrides for sensitive values (API keys).">
      </doc>
      <doc path="docs/PRD.md" title="Tamma Product Requirements Document" section="AI Provider Integration" snippet="FR-7: System shall provide abstract interface supporting multiple AI providers with seamless provider switching. FR-8: System shall maintain provider feature matrix documentation for capability comparison. FR-9: System shall route tasks to optimal AI provider based on cost optimization and capability matching.">
      </doc>
      <doc path="docs/architecture.md" title="Tamma - Technical Architecture" section="Technology Stack" snippet="TypeScript 5.7+ strict mode, Node.js 22 LTS, pnpm workspaces. Interface-based design pattern and plugin architecture for extensibility.">
      </doc>
    </docs>
    <code>
      <!-- Reuse ProviderConfig interface from story 1-1 - no existing implementation code yet -->
    </code>
    <dependencies>
      <ecosystem name="nodejs">
        <package name="zod" version="^3.22.0" reason="Runtime type validation for configuration schemas" />
        <package name="cosmiconfig" version="^9.0.0" reason="Configuration file discovery and loading from multiple sources" />
        <package name="keytar" version="^7.9.0" reason="OS keychain integration for secure credential storage" />
        <package name="chokidar" version="^3.5.3" reason="File watching for configuration hot-reload functionality" />
        <package name="typescript" version="^5.7.0" reason="Type system and compiler for configuration interfaces" />
      </ecosystem>
      <ecosystem name="pnpm-workspace">
        <package name="@tamma/types" version="workspace:*" reason="Shared TypeScript types and interfaces (ProviderConfig, etc.)" />
        <package name="@tamma/config" version="workspace:*" reason="Shared configuration management infrastructure" />
        <package name="@tamma/logger" version="workspace:*" reason="Shared logging infrastructure for configuration events" />
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="package-location">Implementation must be placed in packages/providers/src/config/ following monorepo structure</constraint>
    <constraint type="typescript-config">Use TypeScript 5.7+ strict mode with proper type definitions for configuration schemas and validation</constraint>
    <constraint type="naming-conventions">Follow established patterns: ProviderConfigManager class, ProviderRegistry class, configuration interfaces with descriptive names</constraint>
    <constraint type="configuration-sources">Must support multiple configuration sources: JSON files (~/.tamma/providers.json), environment variables (TAMMA_AI_PROVIDER), runtime API</constraint>
    <constraint type="validation">Configuration must validate on load with JSON Schema validation for required fields, valid URLs, accessible credentials</constraint>
    <constraint type="security">Sensitive values like API keys must support environment variable overrides and secure storage using OS keychain integration</constraint>
    <constraint type="hot-reload">Non-critical settings changes must be reloadable without restart, enabling dynamic provider switching</constraint>
    <constraint type="provider-registry">Must implement provider registry pattern for dynamic discovery and extensibility</constraint>
    <constraint type="documentation">Must include example configurations for all planned providers and security practices documentation</constraint>
  </constraints>
  <interfaces>
    <interface name="ProviderConfig" kind="TypeScript interface" signature="interface ProviderConfig { providerId: string; providerType: 'claude-code' | 'copilot' | 'custom'; apiKey?: string; baseUrl?: string; model?: string; defaultParams?: { temperature?: number; maxTokens?: number; }; }" path="packages/providers/src/types.ts">
    </interface>
  </interfaces>
  <tests>
    <standards>Unit testing using Jest 29+ with TypeScript support. Mock file system operations and external APIs. Line coverage: 80% minimum, branch coverage: 75% minimum, function coverage: 85% minimum. Critical paths (configuration validation, hot-reload, security): 100% coverage. Integration tests for end-to-end configuration workflows.</standards>
    <locations>packages/providers/src/config/**/*.test.ts, packages/providers/test/**/*.test.ts</locations>
    <ideas>
      <test idea="Test configuration file loading and validation" acceptanceCriteria="1, 3">
        Validate loading of multiple provider entries with proper validation of required fields, URLs, and credentials
      </test>
      <test idea="Test environment variable overrides" acceptanceCriteria="4">
        Verify sensitive values (API keys) can be overridden via environment variables
      </test>
      <test idea="Test configuration hot-reload functionality" acceptanceCriteria="5">
        Validate non-critical settings can be reloaded without restart using file watching
      </test>
      <test idea="Test provider registry and discovery" acceptanceCriteria="2">
        Verify dynamic provider discovery and priority-based selection mechanisms
      </test>
      <test idea="Test secure credential handling" acceptanceCriteria="4">
        Validate OS keychain integration and secure credential storage
      </test>
      <test idea="Test comprehensive documentation examples" acceptanceCriteria="6">
        Verify example configurations work for all planned providers
      </test>
    </ideas>
  </tests>
</story-context>