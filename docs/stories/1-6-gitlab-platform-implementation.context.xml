<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>6</storyId>
    <title>GitLab Platform Implementation</title>
    <status>ready-for-dev</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-6-gitlab-platform-implementation.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>GitLab implemented as second Git platform</iWant>
    <soThat>teams using GitLab can adopt system without platform migration</soThat>
    <tasks>- [ ] Task 1: Implement GitLabPlatform class with IGitPlatform interface (AC: 1)
  - [ ] Subtask 1.1: Set up @gitbeaker/node SDK dependency
  - [ ] Subtask 1.2: Implement core platform operations (getRepository, listIssues, getIssue)
  - [ ] Subtask 1.3: Implement branch operations (createBranch, getBranch)
  - [ ] Subtask 1.4: Implement MR operations (createPullRequest, getPullRequest, updatePullRequest, mergePullRequest)
  - [ ] Subtask 1.5: Implement status check operations (getPRStatus, getChecks)

- [ ] Task 2: Implement authentication handling (AC: 2)
  - [ ] Subtask 2.1: Support Personal Access Token authentication
  - [ ] Subtask 2.2: Support OAuth2 authentication flow
  - [ ] Subtask 2.3: Implement token validation and refresh logic

- [ ] Task 3: Integrate GitLab CI/CD API (AC: 3)
  - [ ] Subtask 3.1: Implement pipeline status retrieval
  - [ ] Subtask 3.2: Implement pipeline triggering functionality
  - [ ] Subtask 3.3: Map GitLab pipeline status to normalized CI status model

- [ ] Task 4: Integrate GitLab Merge Request API for review workflows (AC: 4)
  - [ ] Subtask 4.1: Implement MR comments and discussions
  - [ ] Subtask 4.2: Implement reviewer assignment and approval workflows
  - [ ] Subtask 4.3: Handle GitLab-specific review concepts (approvals vs merge requests)

- [ ] Task 5: Implement comprehensive unit testing (AC: 5)
  - [ ] Subtask 5.1: Test happy path operations with mock GitLab API
  - [ ] Subtask 5.2: Test error cases (authentication failures, API errors, rate limits)
  - [ ] Subtask 5.3: Test GitLab-specific differences from GitHub (namespace handling, MR vs PR)

- [ ] Task 6: Implement integration testing (AC: 6)
  - [ ] Subtask 6.1: Set up test GitLab project and credentials
  - [ ] Subtask 6.2: Test end-to-end MR creation workflow
  - [ ] Subtask 6.3: Test MR merge workflow with status checks</tasks>
  </story>

  <acceptanceCriteria>1. GitLab provider implements all interface operations from Story 1.4
2. Provider handles authentication via Personal Access Token or OAuth
3. Provider integrates with GitLab CI API for pipeline triggering
4. Provider integrates with GitLab Merge Request API for review workflows
5. Unit tests cover happy path, error cases, and GitLab-specific differences from GitHub
6. Integration test demonstrates end-to-end Merge Request creation and merge</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Git Platform Abstraction" snippet="GitLab Platform Implementation: GitLabPlatform implements IGitPlatform. Uses GitLab Node SDK for REST API v4. API parity mapping: GitLab merge requests → PR abstraction. GitLab CI/CD integration for pipeline status. Group/subgroup namespace handling. Self-hosted GitLab support via custom base URL." />
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Dependencies and Integrations" snippet="GitLab API (gitlab.com or self-hosted): Issue tracking, merge request management, repository operations. Authentication: Personal Access Token or OAuth2. Rate limits: 300 requests/minute per user, 2000 requests/minute per IP." />
      <doc path="docs/tech-spec-epic-1.md" title="Epic Technical Specification: Foundation & Core Infrastructure" section="Services and Modules" snippet="GitLab Platform Implementation: GitLabPlatform implements IGitPlatform. Uses GitLab Node SDK for REST API v4. API parity mapping: GitLab merge requests → PR abstraction. GitLab CI/CD integration for pipeline status. Group/subgroup namespace handling. Self-hosted GitLab support via custom base URL." />
      <doc path="docs/architecture.md" title="Tamma - Technical Architecture" section="Project Structure" snippet="packages/platforms/ - Git platform abstraction (IGitPlatform interface, GitHub/GitLab implementations)" />
      <doc path="docs/architecture.md" title="Tamma - Technical Architecture" section="Technology Stack" snippet="Git Platform SDKs: @gitbeaker/node (^38.0.0): GitLab API client" />
      <doc path="docs/epics.md" title="Tamma - Epic Breakdown" section="Story 1.6: GitLab Platform Implementation" snippet="As a developer, I want GitLab implemented as second Git platform, so that teams using GitLab can adopt system without platform migration." />
    </docs>
    <code>
      <!-- No existing GitLab implementation code found - this is expected as we're in story preparation phase -->
      <!-- Reference implementation patterns from GitHubPlatform (story 1-5) should be followed -->
      <reference-implementation story="1-5" path="packages/platforms/src/github.ts" notes="Follow same class structure, error handling patterns, and interface compliance" />
    </code>
    <dependencies>
      <ecosystem name="external">
        <package name="@gitbeaker/node" version="^38.0.0" reason="GitLab API client for REST API v4 operations" />
        <package name="@gitbeaker/rest" version="^38.0.0" reason="GitLab REST API client with full feature support" />
        <package name="axios" version="^1.6.0" reason="HTTP client for custom GitLab API calls and rate limit handling" />
      </ecosystem>
      <ecosystem name="internal">
        <package name="@tamma/types" version="workspace:*" reason="Shared TypeScript types and interfaces (IGitPlatform, Repository, etc.)" />
        <package name="@tamma/config" version="workspace:*" reason="Shared configuration management (PlatformConfig, authentication)" />
        <package name="@tamma/logger" version="workspace:*" reason="Shared logging infrastructure for API call tracking" />
      </ecosystem>
      <ecosystem name="testing">
        <package name="jest" version="^29.7.0" reason="Unit testing framework with TypeScript support" />
        <package name="@types/jest" version="^29.5.0" reason="TypeScript type definitions for Jest" />
        <package name="ts-jest" version="^29.1.0" reason="TypeScript preprocessor for Jest" />
        <package name="msw" version="^2.0.0" reason="Mock Service Worker for GitLab API mocking in tests" />
      </ecosystem>
      <ecosystem name="development">
        <package name="typescript" version="^5.7.0" reason="TypeScript compiler and language server" />
        <package name="eslint" version="^8.57.0" reason="Code linting and formatting" />
        <package name="prettier" version="^3.2.0" reason="Code formatting" />
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="package-location">GitLab implementation must be placed in packages/platforms/src/gitlab.ts following monorepo structure</constraint>
    <constraint type="interface-compliance">GitLabPlatform must implement all methods from IGitPlatform interface exactly as defined in story 1-4</constraint>
    <constraint type="api-version">Must use GitLab REST API v4 via @gitbeaker/node SDK for consistency</constraint>
    <constraint type="authentication">Must support Personal Access Token and OAuth2 authentication methods</constraint>
    <constraint type="namespace-handling">Must handle GitLab group/subgroup namespace structure (e.g., group/subgroup/project)</constraint>
    <constraint type="terminology-mapping">Must map GitLab concepts to unified interface: Merge Requests → PullRequest abstraction</constraint>
    <constraint type="self-hosted-support">Must support self-hosted GitLab instances via custom base URL configuration</constraint>
    <constraint type="rate-limits">Must respect GitLab rate limits: 300 requests/minute per user, 2000 requests/minute per IP</constraint>
    <constraint type="ci-integration">Must integrate with GitLab CI/CD API for pipeline status and triggering</constraint>
    <constraint type="testing-coverage">Unit tests: 80% line coverage, 75% branch coverage, 85% function coverage minimum</constraint>
  </constraints>
  <interfaces>
    <interface name="IGitPlatform" kind="TypeScript interface" signature="interface IGitPlatform { initialize(config: PlatformConfig): Promise<void>; getRepository(owner: string, repo: string): Promise<Repository>; listIssues(repo: Repository, filters: IssueFilters): Promise<Issue[]>; getIssue(repo: Repository, issueNumber: number): Promise<Issue>; createBranch(repo: Repository, branchName: string, fromRef: string): Promise<Branch>; getBranch(repo: Repository, branchName: string): Promise<Branch>; createPullRequest(repo: Repository, params: PRCreateParams): Promise<PullRequest>; getPullRequest(repo: Repository, prNumber: number): Promise<PullRequest>; updatePullRequest(pr: PullRequest, updates: PRUpdate): Promise<PullRequest>; mergePullRequest(pr: PullRequest, method: MergeMethod): Promise<MergeResult>; getPRStatus(pr: PullRequest): Promise<PRStatus>; getChecks(pr: PullRequest): Promise<Check[]>; }" path="packages/platforms/src/types.ts">
      <implementation name="GitHubPlatform" path="packages/platforms/src/github.ts" status="ready-for-dev" />
      <implementation name="GitLabPlatform" path="packages/platforms/src/gitlab.ts" status="drafted" />
    </interface>
    <interface name="Repository" kind="TypeScript interface" signature="interface Repository { owner: string; name: string; defaultBranch: string; cloneUrl: string; platform: 'github' | 'gitlab'; }" path="packages/platforms/src/types.ts">
    </interface>
    <interface name="Issue" kind="TypeScript interface" signature="interface Issue { number: number; title: string; body: string; state: 'open' | 'closed'; labels: string[]; assignees: string[]; createdAt: Date; updatedAt: Date; }" path="packages/platforms/src/types.ts">
    </interface>
    <interface name="PullRequest" kind="TypeScript interface" signature="interface PullRequest { number: number; title: string; body: string; state: 'open' | 'closed' | 'merged'; sourceBranch: string; targetBranch: string; author: string; createdAt: Date; updatedAt: Date; mergedAt: Date?; url: string; }" path="packages/platforms/src/types.ts">
      <mapping from="GitLab Merge Request" to="PullRequest" notes="Map MR → PR, handle GitLab-specific fields like approvals, draft status" />
    </interface>
    <interface name="PlatformConfig" kind="TypeScript interface" signature="interface PlatformConfig { platformType: 'github' | 'gitlab' | 'gitea' | 'forgejo'; baseUrl?: string; authToken?: string; defaultParams?: { timeout?: number; retries?: number; }; }" path="packages/platforms/src/types.ts">
      <gitlab-specific baseUrl="https://gitlab.com/api/v4" supportsSelfHosted="true" />
    </interface>
  </interfaces>
  <tests>
    <standards>Unit testing using Jest 29+ with TypeScript support. Interface contract tests to validate all interface methods have correct signatures. Mock GitLab APIs using MSW (Mock Service Worker) for isolated testing. Integration tests with real GitLab API using test project credentials. Line coverage: 80% minimum, branch coverage: 75% minimum, function coverage: 85% minimum. Critical paths (authentication, rate limits, error handling): 100% coverage. Test GitLab-specific differences from GitHub (namespace handling, MR vs PR terminology, approval workflows).</standards>
    <locations>packages/platforms/src/gitlab.test.ts, packages/platforms/test/gitlab-integration.test.ts, packages/platforms/test/mocks/gitlab-api-mock.ts</locations>
    <ideas>
      <test idea="Test GitLabPlatform interface contract compliance" acceptanceCriteria="1">
        Verify all IGitPlatform methods are implemented with correct signatures and behavior
      </test>
      <test idea="Test Personal Access Token authentication" acceptanceCriteria="2">
        Validate PAT authentication with token validation and error handling for invalid tokens
      </test>
      <test idea="Test OAuth2 authentication flow" acceptanceCriteria="2">
        Validate OAuth2 authentication flow with token refresh logic and expiration handling
      </test>
      <test idea="Test GitLab CI/CD API integration" acceptanceCriteria="3">
        Verify pipeline status retrieval and triggering functionality with proper status mapping
      </test>
      <test idea="Test GitLab Merge Request API integration" acceptanceCriteria="4">
        Validate MR operations (create, comment, approve, merge) and mapping to PR abstraction
      </test>
      <test idea="Test GitLab-specific namespace handling" acceptanceCriteria="1,5">
        Verify group/subgroup namespace parsing (group/subgroup/project) and repository operations
      </test>
      <test idea="Test self-hosted GitLab support" acceptanceCriteria="2">
        Validate custom base URL configuration and API endpoint resolution for self-hosted instances
      </test>
      <test idea="Test rate limit handling" acceptanceCriteria="5">
        Verify GitLab rate limit detection (300 req/min per user, 2000 req/min per IP) and backoff logic
      </test>
      <test idea="Test error cases and GitLab quirks" acceptanceCriteria="5">
        Test authentication failures, API errors, GitLab-specific error responses, and edge cases
      </test>
      <test idea="Test end-to-end MR workflow" acceptanceCriteria="6">
        Integration test demonstrating complete MR creation, review, and merge workflow
      </test>
    </ideas>
  </tests>
</story-context>